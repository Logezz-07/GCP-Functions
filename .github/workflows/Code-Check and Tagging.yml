name: Code-Check and Tagging

on:
  push:
    branches:
      - Dev
      - QA
      - Prod

jobs:
  CodeCheck-AutoTag:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      # 2️⃣ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3️⃣ Install Dependencies
      - name: Install Dependencies
        run: npm ci

      # 4️⃣ Run TypeScript Syntax Check
      - name: Run Code Check
        run: |
          npm run check-syntax
          echo "✅ Code Check Completed Successfully!"

      # 5️⃣ Determine Tag Prefix based on Branch
      - name: Set Tag Prefix
        id: prefix
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          if [ "$BRANCH_NAME" == "Dev" ]; then
            echo "prefix=Dev" >> $GITHUB_OUTPUT
          elif [ "$BRANCH_NAME" == "QA" ]; then
            echo "prefix=QA" >> $GITHUB_OUTPUT
          elif [ "$BRANCH_NAME" == "Prod" ]; then
            echo "prefix=Prod" >> $GITHUB_OUTPUT
          else
            echo "Unknown branch, skipping tag"
            exit 1
          fi

      # 6️⃣ Generate Next Version Tag
      - name: Generate Next Tag
        id: version
        run: |
          PREFIX=${{ steps.prefix.outputs.prefix }}
          LAST_TAG=$(git tag --list "${PREFIX}-v*" | sort -V | tail -n 1)
          echo "Last Tag: $LAST_TAG"
          if [ -z "$LAST_TAG" ]; then
            NEXT_VERSION="${PREFIX}-v1"
          else
            VERSION_NUM=$(echo $LAST_TAG | grep -oE '[0-9]+$')
            NEXT_VERSION="${PREFIX}-v$((VERSION_NUM + 1))"
          fi
          echo "Next Version: $NEXT_VERSION"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      # 7️⃣ Create and Push Tag
      - name: Create and Push Tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}
