name: pushToReleaseBranch

on:
  workflow_dispatch:

jobs:
  syntax-check-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout Code from Dev Branch
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: dev
          fetch-depth: 0  # fetch all tags and history

      # 2Ô∏è‚É£ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # 3Ô∏è‚É£ Authenticate to Google Cloud (without committing creds)
      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 4Ô∏è‚É£ Authenticate with Artifact Registry
      - name: Authenticate with Artifact Registry
        run: npm run artifactregistry-login

      # 5Ô∏è‚É£ Install Dependencies
      - name: Install Dependencies
        run: npm ci

      # 6Ô∏è‚É£ Run TypeScript Syntax Check
      - name: Run TypeScript Syntax Check
        run: |
          npm run check-syntax
          echo "‚úÖ TypeScript syntax check completed successfully!"

      # 7Ô∏è‚É£ Generate Custom Version
      - name: Generate Custom Version
        id: version
        run: |
          echo "üîç Fetching remote tags..."
          git fetch --tags

          LATEST_TAG=$(git tag --list "R4B-Function-v*" --sort=-v:refname | head -n1)
          echo "üß© Latest tag found: ${LATEST_TAG}"

          if [ -z "$LATEST_TAG" ]; then
            NEXT_VERSION=1
          else
            NUM=$(echo $LATEST_TAG | sed 's/R4B-Function-v//')
            NEXT_VERSION=$((NUM + 1))
          fi

          VERSION="R4B-Function-v$NEXT_VERSION"
          echo $VERSION > version.txt
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "üÜï New Version Generated: $VERSION"

      # 8Ô∏è‚É£ Push to Release Branch with Tag (without secret files)
      - name: Push to Release Branch with Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          echo "üöÄ Switching to release branch..."
          git checkout -B release

          # Remove unwanted files and node_modules before push
          echo "üßπ Cleaning release branch..."
          rm -rf node_modules
          rm -f .gitignore .npmrc package.json package-lock.json tsconfig.json gha-creds*.json

          # Stage remaining files
          git add .
          git commit -m "Prepare release branch (removed root-level files)" || echo "No changes to commit"
          git push origin release --force

          VERSION=${{ steps.version.outputs.VERSION }}
          echo "üè∑ Preparing to tag version: $VERSION"

          # Tag only if not exists
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION"; then
            echo "‚ö†Ô∏è Tag $VERSION already exists, skipping tag creation."
          else
            git tag $VERSION
            git push origin $VERSION
            echo "‚úÖ Tag $VERSION created and pushed successfully!"
          fi
