name: R4B-CodeCheck-Release

on:
  workflow_dispatch:

jobs:
  R4B-CodeCheck-Release:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repo and fetch all branches/tags
      - name: Checkout Dev
        uses: actions/checkout@v3
        with:
          ref: dev
          fetch-depth: 0  # full history for branch/tag logic

      # 2️⃣ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # 3️⃣ Install Dependencies
      - name: Install Dependencies
        run: npm ci

      # 4️⃣ Run TypeScript Syntax Check
      - name: Run Code Check
        run: |
          npm run check-syntax
          echo "✅ Code Check Completed Successfully!"
      # 5️⃣ Compare branches and update release/tag if needed
      - name: Update Release Branch and Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          # Check if remote release branch exists
          if git ls-remote --heads origin release | grep -q release; then
            echo "🚀 Remote release branch exists. Fetching dev and release..."
            git fetch origin dev release --tags
            echo "🚀 Checking for changes between dev and release..."
            if git diff --quiet origin/release..origin/dev; then
              echo "ℹ️ No changes detected between dev and release. Everything is up to date."
              exit 0
            else
              echo "💾 Changes detected. Updating release branch..."
              git checkout -B release origin/dev
              git push origin release
            fi
          else
            echo "🚀 Remote release branch does not exist. Creating it from dev..."
            git fetch origin dev --tags
            git checkout -b release origin/dev
            git push origin release
          fi
          # Generate next version tag (for both cases)
          LATEST_TAG=$(git tag --list "Cloud-Function-v*" --sort=-v:refname | head -n1)
          if [ -z "$LATEST_TAG" ]; then
            NEXT_VERSION=1
          else
            NUM=$(echo "$LATEST_TAG" | sed 's/Cloud-Function-v//')
            NEXT_VERSION=$((NUM + 1))
          fi
          VERSION="Cloud-Function-v$NEXT_VERSION"
          echo "🏷 Pushing new version tag: $VERSION"
          git tag "$VERSION"
          git push origin "$VERSION"
          echo "✅ Release branch updated and tag $VERSION pushed successfully!"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT